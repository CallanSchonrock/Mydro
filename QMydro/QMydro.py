# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QMydro
                                 A QGIS plugin
 This plugin aids catchment delineation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-07
        git sha              : https://github.com/CallanSchonrock/Mydro
        copyright            : (C) 2024 by Callan Schonrock
        email                : callansch@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .QMydro_dockwidget import QMydroDockWidget
import os.path

# Code Specific Imports
import time
import sys
import numpy as np
import os
from qgis.core import *
from PyQt5.QtWidgets import QAction, QFileDialog
from PyQt5.QtCore import QThread, pyqtSignal, QVariant
from qgis.PyQt.QtWidgets import QAction, QComboBox
from qgis.PyQt.QtGui import QIcon, QColor
import struct
import subprocess
import socket
import processing
import math
import shutil
import csv
import pandas as pd
import matplotlib.pyplot as plt

try:
    from bs4 import BeautifulSoup
except:
    # Use subprocess to call pip for installation using OSGEO4W environment
    subprocess.run(["python", "-m", "pip", "install", "bs4"], check=True, shell=False, executable=os.path.join(os.path.dirname(os.path.dirname(QgsApplication.prefixPath())),"OSGeo4W.bat"), creationflags=subprocess.CREATE_NO_WINDOW)
    # Just incase sleep to refresh environment
    time.sleep(0.25)

from .scripts import designRainfall


def classFactory(iface):
    # Empty classFactory method. Had an issue with QGIS instance not recognizing __init__.py classFactory
    pass

class subcatchmentInfo():
    """
    Subcatchment Characteristics class for ID, Area, L, Sc, CS
    """
    def __init__(self):
        self._ID = 0
        self._Area = 0
        self._L = 0
        self._Sc = 0
        self._CS = 0
    
    @property
    def ID(self):
        return self._ID
    
    @ID.setter
    def ID(self, value):
        self._ID = value
    
    @property
    def Area(self):
        return self._Area
    
    @Area.setter
    def Area(self, value):
        self._Area = value
    
    @property
    def L(self):
        return self._L
    
    @L.setter
    def L(self, value):
        self._L = value
    
    @property
    def Sc(self):
        return self._Sc
    
    @Sc.setter
    def Sc(self, value):
        self._Sc = value
    
    @property
    def CS(self):
        return self._CS
    
    @CS.setter
    def CS(self, value):
        self._CS = value


class QMydro():
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QMydro_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Catchment Analyzer')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'QMydro')
        self.toolbar.setObjectName(u'QMydro')

        #print "** INITIALIZING PyCatch"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QMydro', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = f'{self.plugin_dir}/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING PyCatch"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD PyCatch"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Catchment Analyzer'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------
    def initializeVars(self):
        """Reset Instance Stored Variables"""
        self.cellsize_x_in_crs_units = 0
        self.cellsize_y_in_crs_units = 0
        self.carveLayer = None
        self.outletsLayer = None
        self.autoBreakup = False
        self.targetSubcatSize = 0
    
    def defineOutputPath(self, path):
        self.outputPath = path
    
    def toggleBreakup(self, state):
        if state == 2:
            self.autoBreakup = True
            self.dockwidget.targetSizeLabel.setEnabled(True)
            self.dockwidget.targetSubcatSize.setEnabled(True)
        else:
            self.autoBreakup = False
            self.dockwidget.targetSizeLabel.setEnabled(False)
            self.dockwidget.targetSubcatSize.setEnabled(False)
    
    def setTargetSize(self):
        self.targetSubcatSize = float(self.dockwidget.targetSubcatSize.text())
    
    def toggleGisSubdir(self, state):
        if state == 2:
            self.dockwidget.gisSubdir.setEnabled(True)
            
            self.outputPath = os.path.join(self.dockwidget.outputDir.filePath(), self.dockwidget.gisSubdir.text())
            if os.path.exists(self.dockwidget.outputDir.filePath()):
                if not os.path.exists(self.outputPath):
                    os.makedirs(self.outputPath)
        else:
            self.dockwidget.gisSubdir.setEnabled(False)
            self.outputPath = self.dockwidget.outputDir.filePath()
    
    def checkLatLon(self, state):
        if state == 2:
            self.dockwidget.LatLonLayers.setEnabled(True)
            self.dockwidget.Latitude.setEnabled(False)
            self.dockwidget.Longitude.setEnabled(False)
        else:
            self.dockwidget.LatLonLayers.setEnabled(False)
            self.dockwidget.Latitude.setEnabled(True)
            self.dockwidget.Longitude.setEnabled(True)
    
    def getLatLon(self):
        total_area = 0.0
        weighted_x = 0.0
        weighted_y = 0.0
        
        latLonLayer = self.dockwidget.LatLonLayers.currentLayer()
        if latLonLayer is None:
            raise Exception("Cannot Retrieve Layer")
            
        # Iterate over each feature in the layer
        for feature in latLonLayer.getFeatures():
            # Access the geometry and area of each feature
            polygon_geometry = feature.geometry()
            area = polygon_geometry.area()
        
            # Update total area and weighted sums
            total_area += area
            weighted_x += area * polygon_geometry.centroid().asPoint().x()
            weighted_y += area * polygon_geometry.centroid().asPoint().y()
        
        # Calculate the weighted average centroid
        average_x = weighted_x / total_area
        average_y = weighted_y / total_area
        

        weighted_average_centroid = QgsPoint(average_x, average_y)
        
        # Prepare crs source and destination and instanciate a transform function
        sourceCrs = latLonLayer.crs()
        destCrs = QgsCoordinateReferenceSystem.fromEpsgId(4326)
        tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())
        geom = QgsGeometry(weighted_average_centroid)
        geom.transform(tr)
        x = geom.asPoint().x()
        y = geom.asPoint().y()
        self.dockwidget.Latitude.setText(str(round(y,5)))
        self.dockwidget.Longitude.setText(str(round(x,5)))
    
    def checkARF(self, state):
        if state == 2:
            self.dockwidget.AreaLabel.setEnabled(True)
            self.dockwidget.area.setEnabled(True)
            self.dockwidget.checkArea.setEnabled(True)
        else:
            self.dockwidget.AreaLabel.setEnabled(False)
            self.dockwidget.areaLayer.setEnabled(False)
            self.dockwidget.area.setEnabled(False)
            self.dockwidget.checkArea.setEnabled(False)
    
    def toggleSetArea(self, state):
        if state == 2:
            self.dockwidget.areaLayer.setEnabled(True)
            self.dockwidget.area.setEnabled(False)
        else:
            self.dockwidget.areaLayer.setEnabled(False)
            self.dockwidget.area.setEnabled(True)
    
    def setArea(self):
        total_area = 0.0
        areaLayer = self.dockwidget.areaLayer.currentLayer()
        if areaLayer is None:
            raise Exception("Cannot Retrieve Layer")
            
        # Iterate over each feature in the layer
        for feature in areaLayer.getFeatures():
            # Access the geometry and area of each feature
            polygon_geometry = feature.geometry()
            area = polygon_geometry.area()
        
            # Update total area and weighted sums
            total_area += area
        
        layer_units = areaLayer.crs().mapUnits()

        # Convert cell size to CRS units
        total_area = total_area * (QgsUnitTypes.fromUnitToUnitFactor(layer_units, QgsUnitTypes.DistanceMeters)**2) / 1000000
        self.dockwidget.area.setText(str(round(total_area,5)))
    
    def toggleSubdirectory(self, state):
        if state == 2:
            self.dockwidget.SubDirectory.setEnabled(True)
        else:
            self.dockwidget.SubDirectory.setEnabled(False)
            
    def runRainfall(self):
        lat = round(float(self.dockwidget.Latitude.text()),5)
        lon = round(float(self.dockwidget.Longitude.text()),5)
        try:
            area = float(self.dockwidget.area.text())
        except:
            area = 0
        outputDir = self.dockwidget.rainfallOutputDir.filePath()
        useArf = False
        if self.dockwidget.useARF.isChecked():
            useArf = True
            if area <= 0:
                raise Exception("Area is not valid")
        if self.dockwidget.toggleSubdirectory.isChecked():
            outputDir = os.path.join(outputDir, self.dockwidget.SubDirectory.text())
            if not os.path.exists(outputDir):
                os.makedirs(outputDir)
        designRainfall.getRainfallData(lon, lat, useArf, area, outputDir)
    
    def runMydro(self):
    
        # Define the command
        command = fr'{self.dockwidget.mydroExe.filePath()} {os.path.join(os.path.dirname(self.dockwidget.controlFile.filePath()), "Temp_MydroSimManager.mcf")}'
        startupinfo = subprocess.STARTUPINFO()
        startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
        startupinfo.wShowWindow = subprocess.SW_HIDE
        
        subprocess.run(command, shell=False, cwd=os.path.dirname(self.dockwidget.controlFile.filePath()), check=True, startupinfo=startupinfo)
        if os.path.exists(os.path.join(os.path.dirname(self.dockwidget.controlFile.filePath()), "Temp_MydroSimManager.mcf")):
            os.remove(os.path.join(os.path.dirname(self.dockwidget.controlFile.filePath()), "Temp_MydroSimManager.mcf"))
        
    
    def writeTempMydroControlFile(self):
        with open(self.dockwidget.controlFile.filePath(), 'r') as csvfile, open(os.path.join(os.path.dirname(self.dockwidget.controlFile.filePath()), "Temp_MydroSimManager.mcf"), 'w', newline='') as outputFile:
            reader = csv.reader(csvfile,delimiter='=')
            writer = csv.writer(outputFile,delimiter='=')
            
            for rows in reader:
                if len(rows) >= 2:
                    if rows[0].lower() == "il":
                        writer.writerow([rows[0],str(self.dockwidget.il.value())])
                    elif rows[0].lower() == "cl":
                        writer.writerow([rows[0],str(self.dockwidget.cl.value())])
                    elif rows[0].lower() == "a":
                        writer.writerow([rows[0],str(self.dockwidget.alpha.value())])
                    elif rows[0].lower() == "b":
                        writer.writerow([rows[0],str(self.dockwidget.beta.value())])
                    elif rows[0].lower() == "m":
                        writer.writerow([rows[0],str(self.dockwidget.m.value())])
                    elif rows[0].lower() == "x":
                        writer.writerow([rows[0],str(self.dockwidget.X.value())])
                    elif rows[0].lower() == "n":
                        writer.writerow([rows[0],str(self.dockwidget.N.value())])
                    elif rows[0].lower() == "output":
                        writer.writerow(rows)
                    else:
                        writer.writerow(rows)
                else:
                    writer.writerow(rows)
    
    def runUpdatedParams(self, value):
        self.writeTempMydroControlFile()
        self.runMydro()
        self.updatePlot()
    
    def getControlFileAttrs(self):
        self.dockwidget.alpha.valueChanged.disconnect(self.runUpdatedParams)
        self.dockwidget.beta.valueChanged.disconnect(self.runUpdatedParams)
        self.dockwidget.m.valueChanged.disconnect(self.runUpdatedParams)
        self.dockwidget.il.valueChanged.disconnect(self.runUpdatedParams)
        self.dockwidget.cl.valueChanged.disconnect(self.runUpdatedParams)
        self.dockwidget.X.valueChanged.disconnect(self.runUpdatedParams)
        self.dockwidget.N.valueChanged.disconnect(self.runUpdatedParams)
        
        with open(self.dockwidget.controlFile.filePath(), 'r') as csvfile:
            reader = csv.reader(csvfile,delimiter='=')
            for rows in reader:
                if len(rows) >= 2:
                    if rows[0].lower() == "il":
                        self.dockwidget.il.setValue(float(rows[1]))
                    elif rows[0].lower() == "cl":
                        self.dockwidget.cl.setValue(float(rows[1]))
                    elif rows[0].lower() == "a":
                        self.dockwidget.alpha.setValue(float(rows[1]))
                    elif rows[0].lower() == "b":
                        self.dockwidget.beta.setValue(float(rows[1]))
                    elif rows[0].lower() == "m":
                        self.dockwidget.m.setValue(float(rows[1]))
                    elif rows[0].lower() == "x":
                        self.dockwidget.X.setValue(float(rows[1]))
                    elif rows[0].lower() == "n":
                        self.dockwidget.N.setValue(float(rows[1]))
                    elif rows[0] == "output":
                        self.runOutputPath = rows[1]
        
        self.dockwidget.alpha.valueChanged.connect(self.runUpdatedParams)
        self.dockwidget.beta.valueChanged.connect(self.runUpdatedParams)
        self.dockwidget.m.valueChanged.connect(self.runUpdatedParams)
        self.dockwidget.il.valueChanged.connect(self.runUpdatedParams)
        self.dockwidget.cl.valueChanged.connect(self.runUpdatedParams)
        self.dockwidget.X.valueChanged.connect(self.runUpdatedParams)
        self.dockwidget.N.valueChanged.connect(self.runUpdatedParams)
        
        self.writeTempMydroControlFile()            
        self.runMydro()
        
        df = pd.read_csv(os.path.join(os.path.dirname(self.dockwidget.controlFile.filePath()),self.runOutputPath), skiprows=4)
        mydroOutputCols = df.columns.tolist()
        self.dockwidget.mydroValCols.clear()
        for col in mydroOutputCols:
            self.dockwidget.mydroValCols.addItemWithCheckState(col, False)
        
       
    def updatePlot(self):
        with open(os.path.join(os.path.dirname(self.dockwidget.controlFile.filePath()),self.runOutputPath),'rb') as fh:
            df = pd.read_csv(fh, skiprows=4)
            value_columns = self.dockwidget.mydroValCols.checkedItems()
            if value_columns:
                plt.clf()
                plt.xlabel('Time (Hours)')
                plt.ylabel('Discharge (Cumecs)')
                plt.title('Mydro Plot')
                for col in value_columns:
                    plt.plot(df['Time (hours)'].tolist(), df[col].tolist(), label=col)
                
        if os.path.exists(self.dockwidget.compFilePath.filePath()):
            skiprows = 0
            
            try:
                skiprows = int(self.dockwidget.skiprows.text())
            except:
                skiprows = 0
                
            time_column = self.dockwidget.compTimeCol.checkedItems()    
            df = pd.read_csv(self.dockwidget.compFilePath.filePath(), skiprows=skiprows, index_col=time_column)
            value_columns = self.dockwidget.compValCol.checkedItems()
            
            if time_column and value_columns:
                for col in value_columns:
                    plt.plot(df.index.tolist(), df[col].tolist(), label='Validated ' + col, linestyle='--', alpha=0.75)

            
        plt.legend()
        plt.draw()
    
    
    def updateCompCols(self):
        skiprows = 0
        try:
            skiprows = int(self.dockwidget.skiprows.text())
        except:
            skiprows = 0
        
        if os.path.exists(self.dockwidget.compFilePath.filePath()):
            df = pd.read_csv(self.dockwidget.compFilePath.filePath(), skiprows=skiprows)
            compOutputCols = df.columns.tolist()
            self.dockwidget.compTimeCol.clear()
            self.dockwidget.compValCol.clear()
            for col in compOutputCols:
                self.dockwidget.compTimeCol.addItemWithCheckState(col, False)
                self.dockwidget.compValCol.addItemWithCheckState(col, False)
            
    def transferData(self):
        try:
            if self.carveLayer != None:
                carve_path = self.carveLayer.dataProvider().dataSourceUri()
            else:
                carve_path = 0
            
            targetSize = 0
            if self.dockwidget.toggleBreakup.isChecked(): # If auto breakup is toggled
                targetSize = float(self.dockwidget.targetSubcatSize.text())
            else:
                targetSize = 0
            
            
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags &= ~subprocess.STARTF_USESHOWWINDOW  # Prevent the window from being minimized
            template_batch_file = os.path.join(self.plugin_dir, "scripts//CS//templateRunCatch.bat")
            with open(template_batch_file, 'r') as file:
                template_content = file.read()
            
            # Replace placeholders with actual arguments
            batch_content = template_content.replace('%1', self.elevationRaster.dataProvider().dataSourceUri())\
                                            .replace('%2', str(carve_path))\
                                            .replace('%3', self.outletsLayer.dataProvider().dataSourceUri())\
                                            .replace('%4', self.outputPath)\
                                            .replace('%5', str(targetSize))\
                                            .replace('%6', self.dockwidget.modelType.currentText())\
                                            .replace('%7', os.path.join(self.plugin_dir, "scripts//CS//delineateCatch.exe"))
                                            
            # Save the modified batch content to a new batch file
            generated_batch_file = os.path.join(os.path.dirname(template_batch_file), 'generated_batch_file.bat')
            with open(generated_batch_file, 'w') as file:
                file.write(batch_content)
            subprocess_proc = subprocess.Popen(generated_batch_file, cwd=os.path.join(self.plugin_dir, "scripts//CS"), startupinfo=startupinfo)
            # subprocess_proc = subprocess.Popen([os.path.join(self.plugin_dir, "scripts//CS//delineateCatch.exe")] + args, cwd=os.path.join(self.plugin_dir, "scripts//CS"), startupinfo=startupinfo)  # Use text mode for easier handling of output
            subprocess_proc.wait()
            self.subcatTc = []
            self.subcatUSAreas = []
            with open(os.path.join(self.outputPath, "data.txt"), 'r') as datafile:
                ToC = True
                for line in datafile:
                    line = line.strip()
                    if len(line) > 0:
                        if ToC:
                            if line == "ToC:":
                                continue
                            elif line == "US Area:":
                                ToC = False
                                continue
                            self.subcatTc.extend([float(line)])
                        else:
                            self.subcatUSAreas.extend([float(line)])
        
        except Exception as e:
            # stdout, stderr = subprocess_proc.communicate()
            # print(stdout)
            # print(stderr)
            if 'subprocess_proc' in locals() and subprocess_proc.poll() is None:
                subprocess_proc.terminate()
            raise
        
        
        
    def write_rast_from_numpy(self, path, nameOfData, addToProject):
        # addRasterToInstance = True
        # if os.path.isfile(path):
        #     addRasterToInstance = False
        # with rasterio.open(path, 'w+', driver='GTiff', dtype='float32', count=1, compress='lzw', height=self.height, width=self.width, transform=self.transform, crs=CRS.from_string(self.elevationRaster.crs().authid()), nodata=0) as dst:
            # dst.write(numpyData, 1)

        if addToProject:
            if len(nameOfData) > 0:
                try:
                    QgsProject.instance().mapLayersByName(nameOfData)[0]
                except:
                    self.layer = QgsRasterLayer(path,nameOfData)
                    if nameOfData == "QMydro_Accumulation":
                        self.layer.loadNamedStyle(os.path.join(self.plugin_dir, "accumStyle.qml"))
                    QgsProject.instance().addMapLayer(self.layer)
                else:
                    self.layer = QgsProject.instance().mapLayersByName(nameOfData)[0]
                    self.layer.dataProvider().reloadData()
                    self.layer.triggerRepaint()
                self.layer = None
                
    
    def convertToPolygon(self, path, nameOfData):
        alg_params = {
            'BAND': 1,
            'EIGHT_CONNECTEDNESS': True,
            'EXTRA': '',
            'FIELD': 'ID',
            'INPUT': os.path.join(self.outputPath, "QMydro_SubCats.tif"),
            'OUTPUT': path
        }
        processing.run('gdal:polygonize', alg_params)
        self.catchLayer = QgsVectorLayer(path,nameOfData)
        layer_units = self.catchLayer.crs().mapUnits()
        conversionFac = (QgsUnitTypes.fromUnitToUnitFactor(layer_units, QgsUnitTypes.DistanceMeters)**2) / 1000000
        # Update the attribute table for each feature
        with edit(self.catchLayer):
            field = QgsField("Area", QVariant.Double)
            self.catchLayer.addAttribute(field)
            field = QgsField("US_Area", QVariant.Double)
            self.catchLayer.addAttribute(field)
            field = QgsField("Length", QVariant.Double)
            self.catchLayer.addAttribute(field)
            field = QgsField("Tc", QVariant.Double)
            self.catchLayer.addAttribute(field)
            
            for feature in self.catchLayer.getFeatures():
                
                feature["Area"] = round(feature.geometry().area() * conversionFac,5)
                # Set the default value for the new column
                feature["US_Area"] = self.subcatUSAreas[int(feature["ID"]) - 1]
                try:
                    feature["Length"] = round(self.lengths[str(int(feature["ID"]))],5)
                except:
                    feature["Length"] = 0
                feature["Tc"] = self.subcatTc[int(feature["ID"]) - 1]
                self.catchLayer.updateFeature(feature)
                
        # Commit the changes
        self.catchLayer.commitChanges()
        self.catchLayer.loadNamedStyle(os.path.join(self.plugin_dir, "catchStyling.qml"))
        QgsProject.instance().addMapLayer(self.catchLayer)
        
    def convertToLines(self, path, nameOfData):
        """"Convert Streams raster data to shapefile using Grass Tools (GDAL might have a faster alternative)"""
        alg_params = {
                      'input': os.path.join(self.outputPath, "QMydro_Streams.tif"),
                      'type':0,
                      'column':'ID',
                      '-s':False,
                      '-v':False,
                      '-z':False,
                      '-b':False,
                      '-t':False,
                      'GRASS_REGION_PARAMETER':None,
                      'GRASS_REGION_CELLSIZE_PARAMETER':0,
                      'GRASS_OUTPUT_TYPE_PARAMETER':0,
                      'GRASS_VECTOR_DSCO':'',
                      'GRASS_VECTOR_LCO':'',
                      'GRASS_VECTOR_EXPORT_NOCAT':False,
                      'output': path
                      }
        processing.run('grass7:r.to.vect', parameters=alg_params)
        self.streamsLayer = QgsVectorLayer(path,nameOfData)
        self.streamsLayer.loadNamedStyle(os.path.join(self.plugin_dir, "streamsStyle.qml"))
        QgsProject.instance().addMapLayer(self.streamsLayer)
        layer_units = self.streamsLayer.crs().mapUnits()
        conversionFac = QgsUnitTypes.fromUnitToUnitFactor(layer_units, QgsUnitTypes.DistanceMeters) / 1000
        self.lengths = {}
        for feature in self.streamsLayer.getFeatures():
            length = feature.geometry().length() * conversionFac
            self.lengths[str(int(feature["ID"]))] = length
        
    
    def writeNodalLinks(self, nameOfData):
        centroids = {}
        for feature in self.catchLayer.getFeatures():
            geom = feature.geometry()
            centroids[str(feature["ID"])] = geom.centroid()
        epsgCode = self.catchLayer.crs().authid().split(":")[1]
        line_layer = QgsVectorLayer(f"LineString?epsg:{epsgCode}", "my_line_layer", "memory")
        # line_layer = QgsVectorLayer(f"LineString", "my_line_layer", "memory")
        with edit(line_layer):
            
            with open(os.path.join(self.outputPath, "_RoutingFile.vec"), 'r') as csvfile:
                reader = csv.reader(csvfile, delimiter=' ')
                usSubbies = []
                for rows in reader:
                    data = []
                    for field in rows:
                        split_data = [item for item in field.split('\t')]
                        data.extend(split_data)
                    if "RAIN" in data:
                        for text in data:
                            if '#' in text:
                                usSubbies.insert(0,text[1:])
                    if "GET." in data:
                        usSubbies = usSubbies[:-1] + usSubbies[-1]
                    if "STORE." in data:
                        usSubbies = [usSubbies]
                    if "ROUTE" in data:
                        for text in data:
                            if '#' in text:
                                dsSubbyCentroid = centroids[text[1:]]
                                print(usSubbies)
                                for usSubby in [item for item in usSubbies if isinstance(item, str)]:
                                    usSubbyCentroid = centroids[usSubby]
                                    # Create a new feature
                                    line_feature = QgsFeature()
                                    line_geometry = QgsGeometry.fromPolyline([QgsPoint(usSubbyCentroid.asPoint()), QgsPoint(dsSubbyCentroid.asPoint())])
                                    line_feature.setGeometry(line_geometry)
                                    line_layer.dataProvider().addFeatures([line_feature])
                        usSubbies = [item for item in usSubbies if not isinstance(item, str)]
        
        line_layer.commitChanges()
        line_layer.updateExtents()
        line_layer.setCrs(self.catchLayer.crs())
        options = QgsVectorFileWriter.SaveVectorOptions()
        options.driverName = "ESRI Shapefile"
        # Write the line layer to the specified file
        QgsVectorFileWriter.writeAsVectorFormatV3(
            line_layer,
            os.path.join(self.outputPath, "QMydro_NodalLinks.shp"),
            QgsProject.instance().transformContext(),
            options
        )
        
        # Load the saved line layer back into QGIS (optional)
        saved_line_layer = QgsVectorLayer(os.path.join(self.outputPath, "QMydro_NodalLinks.shp"), nameOfData, "ogr")
        saved_line_layer.loadNamedStyle(os.path.join(self.plugin_dir, "nodalStyle.qml"))
        QgsProject.instance().addMapLayer(saved_line_layer)
    
    def processAlgs(self):
        """Main delineation method"""
        if self.dockwidget.toggleGisSubdir.isChecked():
            self.outputPath = os.path.join(self.dockwidget.outputDir.filePath(), self.dockwidget.gisSubdir.text())
            if os.path.exists(self.dockwidget.outputDir.filePath()):
                if not os.path.exists(self.outputPath):
                    os.makedirs(self.outputPath)
        else:
            self.outputPath = self.dockwidget.outputDir.filePath()
        # Reset existing instance properties
        self.catchData = None
        self.catchLayer = None
        self.layer = None
        self.carveLayer = self.dockwidget.inputCarveFile.currentLayer()
        self.outletsLayer = self.dockwidget.inputOutletsFile.currentLayer()
        self.elevationRaster = self.dockwidget.inputElevationFile.currentLayer()

        # Remove existing files in output directory
        filesToRemove = []
        for files in os.listdir(self.outputPath):
            if "QMydro_Streams." in files:
                filesToRemove.extend([files])
            elif "QMydro_SubCats." in files:
                filesToRemove.extend([files])
            elif "QMydro_NodalLinks." in files:
                filesToRemove.extend([files])
        
        for files in filesToRemove:
            os.remove(os.path.join(self.outputPath, files))

        if os.path.exists(os.path.join(self.outputPath, "QMydro_Accumulation.tif")):
            os.remove(os.path.join(self.outputPath, "QMydro_Accumulation.tif"))
        
        if os.path.exists(os.path.join(self.outputPath, "QMydro_SubCats.tif")):
            os.remove(os.path.join(self.outputPath, "QMydro_SubCats.tif"))
        
        if os.path.exists(os.path.join(self.outputPath, "QMydro_SubCats.tif.aux.xml")):
            os.remove(os.path.join(self.outputPath, "QMydro_SubCats.tif.aux.xml"))
            
        time.sleep(0.1) # Wait before large file transfer
        self.transferData() # Transfer and process externally
        shutil.copy(os.path.join(self.plugin_dir, "scripts//CS//TempVecFile.vec"), os.path.join(self.outputPath, "_RoutingFile.vec"))
        shutil.copy(os.path.join(self.plugin_dir, "scripts//CS//TempSubCats.csv"), os.path.join(self.outputPath, "_SubcatFile.csv"))
        
        
        # Output Files
        self.write_rast_from_numpy(os.path.join(self.outputPath, "QMydro_SubCats.tif"), "", False)
        self.write_rast_from_numpy(os.path.join(self.outputPath, "QMydro_Streams.tif"), "QMydro_Streams", False)
        self.write_rast_from_numpy(os.path.join(self.outputPath, "QMydro_Accumulation.tif"), "QMydro_Accumulation", True)
        
        # Python Processing
        self.layer = None
        self.convertToLines(os.path.join(self.outputPath, "QMydro_Streams.shp"), "QMydro_Streams")
        self.convertToPolygon(os.path.join(self.outputPath, "QMydro_SubCats.shp"), "QMydro_SubCats")
        
        self.writeNodalLinks("QMydro_NodalLinks")

        if len(self.dockwidget.rainfallOutputDir.filePath()) <= 0:
            self.dockwidget.rainfallOutputDir.setFilePath(self.dockwidget.outputDir.filePath())
            
        if os.path.exists(os.path.join(self.outputPath, "QMydro_SubCats.tif")):
            os.remove(os.path.join(self.outputPath, "QMydro_SubCats.tif"))
            
        if os.path.exists(os.path.join(self.outputPath, "QMydro_SubCats.tif.aux.xml")):
            os.remove(os.path.join(self.outputPath, "QMydro_SubCats.tif.aux.xml"))
    
    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            
            self.pluginIsActive = True

            #print "** STARTING PyCatch"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = QMydroDockWidget()
            
            self.initializeVars()
            
            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            
            # Catchment Breakup
            
            self.dockwidget.inputElevationFile.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dockwidget.inputElevationFile.setCurrentIndex(-1)
            
            self.dockwidget.inputCarveFile.setFilters(QgsMapLayerProxyModel.LineLayer)
            self.dockwidget.inputCarveFile.setCurrentIndex(-1)
            
            self.dockwidget.inputOutletsFile.setFilters(QgsMapLayerProxyModel.LineLayer)
            self.dockwidget.inputOutletsFile.setCurrentIndex(-1)
            
            self.dockwidget.outputDir.setDialogTitle('Select Directory')
            self.dockwidget.outputDir.fileChanged.connect(self.defineOutputPath)
            
            self.dockwidget.processAlgs.clicked.connect(self.processAlgs)
            
            self.dockwidget.toggleBreakup.setChecked(False)
            self.dockwidget.toggleBreakup.stateChanged.connect(self.toggleBreakup)
            
            self.dockwidget.targetSubcatSize.setEnabled(False)
            self.dockwidget.targetSubcatSize.textChanged.connect(self.setTargetSize)
            
            self.dockwidget.gisSubdir.setText("model")
            self.dockwidget.toggleGisSubdir.setChecked(False)
            self.dockwidget.toggleGisSubdir.stateChanged.connect(self.toggleGisSubdir)
            
            # Populate the combo box with the list of items
            itemList = ["Mydro", "URBS"]
            self.dockwidget.modelType.clear()
            self.dockwidget.modelType.addItems(itemList)
            
            # GENERATE RAIN TAB
            
            self.dockwidget.area.setEnabled(False)
            
            self.dockwidget.checkLatLon.setChecked(False)
            self.dockwidget.checkLatLon.stateChanged.connect(self.checkLatLon)
            
            self.dockwidget.useARF.setChecked(False)
            self.dockwidget.useARF.stateChanged.connect(self.checkARF)
            
            self.dockwidget.checkArea.setChecked(False)
            self.dockwidget.checkArea.stateChanged.connect(self.toggleSetArea)
            
            self.dockwidget.LatLonLayers.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.dockwidget.LatLonLayers.setCurrentIndex(-1)
            self.dockwidget.LatLonLayers.activated.connect(self.getLatLon)
            
            self.dockwidget.areaLayer.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.dockwidget.areaLayer.setCurrentIndex(-1)
            self.dockwidget.areaLayer.activated.connect(self.setArea)
            
            self.dockwidget.SubDirectory.setText("Rainfall")
            self.dockwidget.toggleSubdirectory.setChecked(False)
            self.dockwidget.toggleSubdirectory.stateChanged.connect(self.toggleSubdirectory)
            
            self.dockwidget.runRainfall.clicked.connect(self.runRainfall)
            
            # Simulation Manager
            plt.ion()
            self.dockwidget.controlFile.fileChanged.connect(self.getControlFileAttrs)
            self.dockwidget.mydroValCols.checkedItemsChanged.connect(self.updatePlot)
            
            self.dockwidget.alpha.valueChanged.connect(self.runUpdatedParams)
            self.dockwidget.beta.valueChanged.connect(self.runUpdatedParams)
            self.dockwidget.m.valueChanged.connect(self.runUpdatedParams)
            self.dockwidget.il.valueChanged.connect(self.runUpdatedParams)
            self.dockwidget.cl.valueChanged.connect(self.runUpdatedParams)
            self.dockwidget.X.valueChanged.connect(self.runUpdatedParams)
            self.dockwidget.N.valueChanged.connect(self.runUpdatedParams)
            
            self.dockwidget.compFilePath.fileChanged.connect(self.updateCompCols)
            self.dockwidget.skiprows.editingFinished.connect(self.updateCompCols)
            
            self.dockwidget.compTimeCol.checkedItemsChanged.connect(self.updatePlot)
            self.dockwidget.compValCol.checkedItemsChanged.connect(self.updatePlot)
            